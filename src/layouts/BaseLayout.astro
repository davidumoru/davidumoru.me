---
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import "../style/index.css";
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";
import { ClientRouter } from "astro:transitions";
import type { TransitionAnimationPair } from "astro";
import LoadingIndicator from "astro-loading-indicator/component";

export type Props = {
  title?: string;
  description?: string;
  hideFooter?: boolean;
};
const { title, description, hideFooter } = Astro.props;

const rawPath = new URL(Astro.url.pathname, Astro.site).pathname.replace(
  /\/$/,
  ""
);
const pagePath = rawPath === "" ? "/index" : rawPath;

const ogImageUrl = `https://www.davidumoru.me/og${pagePath}.png`;

const forwards: TransitionAnimationPair = {
  old: {
    name: "fadeOutUp",
    duration: "0.2s",
    easing: "ease-in",
    fillMode: "forwards",
  },
  new: {
    name: "fadeInUp",
    duration: "0.3s",
    delay: "0.1s",
    easing: "ease-out",
    fillMode: "backwards",
  },
};

const backwards: TransitionAnimationPair = {
  old: {
    name: "fadeOutDown",
    duration: "0.2s",
    easing: "ease-in",
    fillMode: "forwards",
  },
  new: {
    name: "fadeInDown",
    duration: "0.3s",
    delay: "0.1s",
    easing: "ease-out",
    fillMode: "backwards",
  },
};

const viewTransition = {
  forwards,
  backwards,
};
---

<html lang="en" transition:animate="none">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={Astro.url.href} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Pixelify+Sans:wght@400..700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta
      name="description"
      content={description
        ? description
        : "David Umoru: I build things, mostly with code and sometimes design. Currently enjoying CSS. See what I'm up to."}
    />

    <meta
      property="og:title"
      content={title ? `${title} - David Umoru` : "David Umoru"}
    />
    <meta property="og:site_name" content="David Umoru" />
    <meta
      property="og:description"
      content={description || "Designer who writes code."}
    />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:image:alt" content={title || "Page Preview"} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:type" content="website" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content={title ? `${title} - David Umoru` : "David Umoru"}
    />
    <meta
      name="twitter:description"
      content={description || "Designer who writes code."}
    />
    <meta name="twitter:image" content={ogImageUrl} />
    <meta name="twitter:image:alt" content={title || "Page Preview"} />
    <meta name="twitter:url" content={Astro.url.href} />
    <meta name="twitter:site" content="@theumoru" />
    <meta name="twitter:creator" content="@theumoru" />

    <title>{title && `${title} - `} David Umoru</title>
  
    <script is:inline>
      const themeStorageKey = "theme-preference";
      const getThemePreference = () => {
        if (typeof localStorage !== "undefined") {
          const storedTheme = localStorage.getItem(themeStorageKey);
          if (storedTheme === "light" || storedTheme === "dark") {
            return storedTheme;
          }
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const theme = getThemePreference();
      
      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    </script>

    <ClientRouter />
    <LoadingIndicator color="var(--gray-12)" height="2px" threshold={400} />
  </head>

  <body>
    <Header transition:persist />
    <main class="flow" transition:animate={viewTransition}>
      <slot />
    </main>
    {!hideFooter && <Footer />}
    <Analytics />
    <SpeedInsights />

    <script is:inline>
      document.addEventListener("astro:before-swap", (event) => {
        const theme = getThemePreference();
        
        if (theme === "dark") {
          event.newDocument.documentElement.classList.add("dark");
        } else {
          event.newDocument.documentElement.classList.remove("dark");
        }
      });
    </script>
  </body>
</html>

<style is:global>
  @keyframes fadeOutUp {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-16px);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(16px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeOutDown {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(16px);
    }
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-16px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
