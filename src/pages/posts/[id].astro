---
import { type CollectionEntry, getCollection, render } from "astro:content";

import PostLayout from "../../layouts/PostLayout.astro";

export interface Props {
  post: CollectionEntry<"posts">;
  prev: CollectionEntry<"posts"> | null;
  next: CollectionEntry<"posts"> | null;
}

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post, index) => ({
    params: { id: post.id },
    props: {
      post,
      prev: posts[index - 1] ?? posts[posts.length - 1],
      next: posts[index + 1] ?? posts[0],
    },
  }));
}
const { post, prev, next } = Astro.props;
const { Content } = await render(post);

const { data } = post;
---

<PostLayout
  title={data.title}
  description={data.description}
  img={data.img}
  imgAlt={data.imgAlt}
  ogImage={data.ogImage?.src}
  datePublished={data.datePublished}
  dateModified={data.dateModified}
>
  <Content />
  <div class="pagination" slot="after-prose">
    {
      prev && (
        <a href={prev.id} class="prev">
          <span class="label">Previous</span>
          <span class="title">{prev.data.title}</span>
        </a>
      )
    }
    {
      next && (
        <a href={next.id} class="next">
          <span class="label">Next</span>
          <span class="title">{next.data.title}</span>
        </a>
      )
    }
  </div>
</PostLayout>

<style>
  .pagination {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-m);
    margin-block-start: var(--space-3xl);
    margin-inline: auto;
    width: 100%;
  }

  .pagination a {
    display: flex;
    flex-direction: column;
    padding: var(--space-m);
    border-radius: var(--radius-m);
    border: 1px solid var(--gray-5);
    background-color: var(--gray-1);
    text-decoration: none;
    transition:
      background-color 0.2s ease-in-out,
      border-color 0.2s ease-in-out;
    position: relative;
    overflow: hidden;
    min-height: 4rem;
  }

  .pagination a.prev {
    position: relative;
    padding-left: calc(var(--space-m) * 2);
  }

  .pagination a.next {
    position: relative;
    padding-right: calc(var(--space-m) * 2);
    text-align: right;
  }

  .pagination a.prev::before,
  .pagination a.next::after {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    font-size: var(--step-1);
    color: var(--gray-10);
    transition: color 0.2s ease-in-out;
  }

  .pagination a.prev::before {
    content: "←";
    left: var(--space-s);
  }

  .pagination a.next::after {
    content: "→";
    right: var(--space-s);
  }

  .pagination .label {
    display: block;
    font-size: var(--step--1);
    color: var(--gray-11);
    margin-bottom: var(--space-2xs);
    font-weight: var(--font-weight-normal);
  }

  .pagination .title {
    display: block;
    font-weight: var(--font-weight-medium);
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  @media (hover: hover) and (pointer: fine) {
    .pagination a:hover {
      background-color: var(--gray-2);
      border-color: var(--gray-7);
    }

    .pagination a:hover::before,
    .pagination a:hover::after {
      color: var(--gray-12);
    }
  }

  @media (max-width: 640px) {
    .pagination {
      grid-template-columns: 1fr;
    }
  }
</style>
