---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import CenteredLayout from "../layouts/CenteredLayout.astro";
import PageHeader from "../components/PageHeader.astro";
const projects = (await getCollection("projects")).sort(
  (a, b) => b.data.year - a.data.year
);
---

<BaseLayout title="Projects">
  <CenteredLayout>
    <PageHeader
      title=`Projects`
      description=`Some of my selected work (${projects.length})`
    />
    <div class="project-list">
      {
        projects.map((project) => (
          <div class="project-card" data-project-slug={project.slug}>
            <div class="project-row">
              <h2 class="project-title">{project.data.title}</h2>
              <div class="project-meta">
                <div class="project-dates">{`${project.data.year}`}</div>
                <div class="project-location">
                  {project.data.location || ""}
                </div>
              </div>
              <div class="project-actions">
                {project.data.demoUrl || project.data.githubUrl ? (
                  <a
                    href={project.data.demoUrl || project.data.githubUrl}
                    target="_blank"
                    class="action-button live-site-link"
                  >
                    Live site
                  </a>
                ) : null}
                <button class="action-button toggle-button mobile-only">
                  Expand
                </button>
              </div>
            </div>
            <div class="expanded-content">
              {project.data.images && project.data.images.length > 0 && (
                <div class="image-slider">
                  <div class="image-wrapper">
                    {project.data.images.map((image) => (
                      <div class="project-image">
                        <img
                          src={image.url}
                          alt={image.alt || `${project.data.title} preview`}
                          draggable="false"
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
              <div class="project-info">
                <div class="info-section">
                  <h3>ABOUT</h3>
                  <p>{project.data.description || ""}</p>
                </div>
                <div class="info-section">
                  <h3>ROLE</h3>
                  <p>{project.data.role || "Design Engineer"}</p>
                </div>
                <div class="info-section">
                  <h3>TECHNOLOGIES</h3>
                  <p>{project.data.technologies || "TypeScript"}</p>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </CenteredLayout>
</BaseLayout>
<style>
  .project-list {
    display: flex;
    flex-direction: column;
    margin: 0 auto;
    color: var(--gray-12);
  }
  .project-card {
    border-top: 1px solid var(--gray-6);
    padding: 1.5rem 0;
  }
  .project-card:last-child {
    border-bottom: 1px solid var(--gray-6);
  }
  .project-row {
    display: grid;
    grid-template-columns: 1fr auto auto;
    gap: 1rem;
    align-items: center;
    cursor: pointer;
  }
  .project-meta {
    text-align: right;
    color: var(--gray-11);
    font-size: 0.875rem;
    text-transform: uppercase;
  }
  .project-dates {
    margin-bottom: 0.25rem;
  }
  .action-button {
    display: inline-block;
    color: var(--gray-12);
    text-decoration: none;
    padding: 0.5rem 1rem;
    border: 1px solid var(--gray-8);
    border-radius: 2rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    background-color: transparent;
    cursor: pointer;
  }
  .action-button:hover {
    background-color: var(--gray-6);
  }
  .mobile-only {
    display: none;
  }
  .project-actions {
    display: flex;
    gap: 0.5rem;
  }
  .expanded-content {
    display: none;
    margin-top: 2rem;
    overflow: hidden;
  }
  .image-slider {
    width: 100%;
    height: clamp(350px, 50vh, 500px);
    overflow-x: auto;
    margin-bottom: 2rem;
    position: relative;
    cursor: grab;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  .image-slider::-webkit-scrollbar {
    display: none;
  }
  .image-wrapper {
    display: flex;
    gap: 1rem;
    height: 100%;
  }
  .project-image {
    flex: 0 0 auto;
    width: clamp(280px, 60%, 650px);
    height: 100%;
  }
  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.5rem;
    user-select: none;
    -webkit-user-drag: none;
    pointer-events: none;
  }
  .project-info {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 2rem;
  }
  .info-section h3 {
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
    margin-bottom: 1rem;
    color: var(--gray-11);
  }
  .info-section p {
    font-size: 1rem;
    line-height: 1.6;
    white-space: pre-line;
  }
  :global(.cursor-tooltip) {
    position: absolute;
    background-color: var(--gray-2);
    color: var(--gray-8);
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 0.85rem;
    z-index: 10000;
    display: none;
    pointer-events: none;
    white-space: nowrap;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
  @media (max-width: 1024px) {
    .project-info {
      grid-template-columns: 1fr 1fr;
    }
    .project-image {
      width: clamp(250px, 70%, 600px);
    }
  }
  @media (max-width: 768px) {
    .project-meta,
    .project-actions {
      justify-self: flex-start;
      text-align: left;
    }
    .project-row {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }
    .project-info {
      grid-template-columns: 1fr;
    }
    .project-image {
      width: clamp(200px, 85%, 500px);
    }
    .mobile-only {
      display: inline-block;
    }
  }
</style>
<script>
  interface SliderControl {
    imageSlider: HTMLElement;
    imageWrapper: HTMLElement;
    animationFrameId: number | null;
    scrollSpeed: number;
    isHoveringSlider: boolean;
    isDraggingSlider: boolean;
    cloneImagesIfNeeded: (this: SliderControl) => void;
    startAutoScroll: (this: SliderControl) => void;
    stopAutoScroll: (this: SliderControl) => void;
    initializeSlider: (this: SliderControl) => void;
  }

  interface ProjectImage {
    url: string;
    alt?: string;
  }

  function initializeProjectPageInteractions() {
    let tooltipElem: HTMLDivElement | null = null;

    function initTooltip(): void {
      const existingTooltip = document.body.querySelector<HTMLDivElement>(".cursor-tooltip");
      if (existingTooltip) {
        tooltipElem = existingTooltip;
      } else {
        tooltipElem = document.createElement("div");
        tooltipElem.classList.add("cursor-tooltip");
        document.body.appendChild(tooltipElem);
      }
    }

    function showProjectTooltip(event: MouseEvent, text: string): void {
      if (!tooltipElem) {
        initTooltip();
      }
      if (tooltipElem) {
        tooltipElem.textContent = text;
        tooltipElem.style.left = `${event.pageX + 15}px`;
        tooltipElem.style.top = `${event.pageY + 15}px`;
        tooltipElem.style.display = "block";
      }
    }

    function hideProjectTooltip(): void {
      if (tooltipElem) {
        tooltipElem.style.display = "none";
      }
    }

    const sliderControls = new WeakMap<HTMLElement, SliderControl>();
    let currentDraggingSlider: HTMLElement | null = null;
    let globalDragStartX: number = 0;
    let globalDragScrollLeft: number = 0;

    function handleDocumentMouseMove(e: MouseEvent): void {
      if (!currentDraggingSlider) return;
      const C = sliderControls.get(currentDraggingSlider);
      if (!C || !C.isDraggingSlider) return;
      e.preventDefault();
      const x = e.pageX - currentDraggingSlider.offsetLeft;
      const walk = (x - globalDragStartX) * 1.5;
      currentDraggingSlider.scrollLeft = globalDragScrollLeft - walk;
    }

    function handleDocumentMouseUp(): void {
      if (!currentDraggingSlider) return;
      const C = sliderControls.get(currentDraggingSlider);
      if (C) {
        C.isDraggingSlider = false;
        currentDraggingSlider.style.cursor = "grab";
      }
      document.removeEventListener("mousemove", handleDocumentMouseMove);
      document.removeEventListener("mouseup", handleDocumentMouseUp);
      currentDraggingSlider = null;
    }

    function toggleProject(card: HTMLElement, e?: MouseEvent): void {
      const expandedContent =
        card.querySelector<HTMLElement>(".expanded-content");
      const imageSlider = card.querySelector<HTMLElement>(".image-slider");
      const toggleButton =
        card.querySelector<HTMLButtonElement>(".toggle-button");

      if (!expandedContent) return;

      const isCurrentlyExpanded = card.classList.contains("expanded");

      const projectCardsList =
        document.querySelectorAll<HTMLElement>(".project-card");
      projectCardsList.forEach((otherCard: HTMLElement) => {
        if (otherCard !== card) {
          const otherContent =
            otherCard.querySelector<HTMLElement>(".expanded-content");
          const otherToggleButton =
            otherCard.querySelector<HTMLButtonElement>(".toggle-button");

          if (otherCard.classList.contains("expanded")) {
            if (otherContent) otherContent.style.display = "none";
            otherCard.classList.remove("expanded");

            if (otherToggleButton) {
              otherToggleButton.textContent = "Expand";
            }

            const otherSlider =
              otherCard.querySelector<HTMLElement>(".image-slider");
            if (otherSlider) {
              const C = sliderControls.get(otherSlider);
              if (C) C.stopAutoScroll();
            }
          }
        }
      });

      if (!isCurrentlyExpanded) {
        expandedContent.style.display = "block";
        card.classList.add("expanded");

        if (toggleButton) {
          toggleButton.textContent = "Collapse";
        }

        if (imageSlider) {
          const C = sliderControls.get(imageSlider);
          if (C) {
            C.initializeSlider();
            C.isHoveringSlider = false;
            C.isDraggingSlider = false;
            C.startAutoScroll();
          }
        }

        setTimeout(() => {
          card.scrollIntoView({ behavior: "smooth", block: "nearest" });
        }, 100);
      } else {
        expandedContent.style.display = "none";
        card.classList.remove("expanded");

        if (toggleButton) {
          toggleButton.textContent = "Expand";
        }

        if (imageSlider) {
          const C = sliderControls.get(imageSlider);
          if (C) C.stopAutoScroll();
        }
      }

      if (e) {
        const isNowExpanded = card.classList.contains("expanded");
        showProjectTooltip(e, isNowExpanded ? "COLLAPSE" : "EXPAND");
      }
    }

    initTooltip();

    const projectCards =
      document.querySelectorAll<HTMLElement>(".project-card");

    if (projectCards.length === 0 && !document.querySelector(".project-list")) {
        return;
    }

    projectCards.forEach((card: HTMLElement) => {
      const projectRow = card.querySelector<HTMLElement>(".project-row");
      const imageSlider = card.querySelector<HTMLElement>(".image-slider");
      const imageWrapper = card.querySelector<HTMLElement>(".image-wrapper");
      const toggleButton =
        card.querySelector<HTMLButtonElement>(".toggle-button");

      if (toggleButton) {
        const clickHandler = (ev: MouseEvent) => {
          ev.stopPropagation();
          toggleProject(card);
        };
        if (!(toggleButton as any).__clickHandlerAttached) {
            toggleButton.addEventListener("click", clickHandler);
            (toggleButton as any).__clickHandlerAttached = true;
        }
      }

      if (imageSlider && imageWrapper) {
        const controls: SliderControl = {
          imageSlider,
          imageWrapper,
          animationFrameId: null,
          scrollSpeed: 0.5,
          isHoveringSlider: false,
          isDraggingSlider: false,

          cloneImagesIfNeeded: function (this: SliderControl) {
            if (
              this.imageWrapper.dataset.cloned === "true" ||
              this.imageWrapper.children.length === 0
            )
              return;

            const originalChildren = Array.from(this.imageWrapper.children);
            originalChildren.forEach((child) => {
              this.imageWrapper.appendChild(child.cloneNode(true));
            });
            this.imageWrapper.dataset.cloned = "true";
          },

          startAutoScroll: function (this: SliderControl) {
            this.stopAutoScroll();
            if (this.imageWrapper.children.length === 0) return;
            this.cloneImagesIfNeeded();

            const scrollTick = () => {
              if (
                !this.isHoveringSlider &&
                !this.isDraggingSlider &&
                card.classList.contains("expanded")
              ) {
                const scrollableWidth = this.imageWrapper.scrollWidth / 2;
                if (scrollableWidth > 0) {
                  this.imageSlider.scrollLeft -= this.scrollSpeed;
                  if (this.imageSlider.scrollLeft <= 0.1) {
                    this.imageSlider.scrollLeft += scrollableWidth;
                  }
                }
              }
              this.animationFrameId = requestAnimationFrame(scrollTick);
            };

            this.animationFrameId = requestAnimationFrame(scrollTick);
          },

          stopAutoScroll: function (this: SliderControl) {
            if (this.animationFrameId) {
              cancelAnimationFrame(this.animationFrameId);
              this.animationFrameId = null;
            }
          },

          initializeSlider: function (this: SliderControl) {
            if (this.imageSlider.dataset.sliderInitialized === "true" && this.imageWrapper.dataset.cloned === "true") {
                 // Reset scroll position even if initialized, as it might have been hidden
                const scrollableWidth = this.imageWrapper.scrollWidth / 2;
                if (scrollableWidth > 0 && this.imageWrapper.children.length > 0) {
                    this.imageSlider.scrollLeft = scrollableWidth;
                } else {
                    this.imageSlider.scrollLeft = 0;
                }
            }
            this.cloneImagesIfNeeded();
            this.imageSlider.dataset.sliderInitialized = "true";

            const scrollableWidth = this.imageWrapper.scrollWidth / 2;
            if (scrollableWidth > 0 && this.imageWrapper.children.length > 0) {
              this.imageSlider.scrollLeft = scrollableWidth;
            } else {
              this.imageSlider.scrollLeft = 0;
            }
          },
        };

        sliderControls.set(imageSlider, controls);

        imageSlider.addEventListener("mouseenter", () => { controls.isHoveringSlider = true; });
        imageSlider.addEventListener("mouseleave", () => { controls.isHoveringSlider = false; });
        imageSlider.addEventListener("mousedown", (e: MouseEvent) => {
          if (e.button !== 0) return;
          controls.isDraggingSlider = true;
          currentDraggingSlider = imageSlider;
          globalDragStartX = e.pageX - imageSlider.offsetLeft;
          globalDragScrollLeft = imageSlider.scrollLeft;
          imageSlider.style.cursor = "grabbing";
          document.addEventListener("mousemove", handleDocumentMouseMove);
          document.addEventListener("mouseup", handleDocumentMouseUp);
        });
      }

      if (projectRow) {
        projectRow.addEventListener("mouseenter", (e: MouseEvent) => {
          if ((e.target as HTMLElement)?.closest?.(".action-button")) return;
          const isExpanded = card.classList.contains("expanded");
          showProjectTooltip(e, isExpanded ? "COLLAPSE" : "EXPAND");
        });

        projectRow.addEventListener("mousemove", (e: MouseEvent) => {
          const actionButton = (e.target as HTMLElement)?.closest?.(".action-button");
          if (actionButton) {
            hideProjectTooltip();
            return;
          }
          if (tooltipElem && tooltipElem.style.display === "block") {
            tooltipElem.style.left = `${e.pageX + 15}px`;
            tooltipElem.style.top = `${e.pageY + 15}px`;
          } else {
            const isExpanded = card.classList.contains("expanded");
            showProjectTooltip(e, isExpanded ? "COLLAPSE" : "EXPAND");
          }
        });

        projectRow.addEventListener("mouseleave", () => {
          hideProjectTooltip();
        });

        const rowClickHandler = (e: MouseEvent) => {
            if ((e.target as HTMLElement)?.closest?.(".action-button")) {
                return;
            }
            toggleProject(card, e);
        };
        if (!(projectRow as any).__rowClickHandlerAttached) {
            projectRow.addEventListener("click", rowClickHandler);
            (projectRow as any).__rowClickHandlerAttached = true;
        }
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeProjectPageInteractions);
  } else {
    initializeProjectPageInteractions();
  }

  document.addEventListener("astro:after-swap", initializeProjectPageInteractions);
</script>