---

---

<button
  id="theme-toggle"
  class="theme-toggle-button"
  title="Toggle light/dark theme"
  aria-label="Switch to dark theme"
  aria-live="polite"
>
  <span class="toggle-icon"></span>
</button>
<script>
  const THEME_STORAGE_KEY = "theme-preference";
  const htmlElement = document.documentElement;

  const updateButtonAriaLabel = (
    buttonElement: HTMLButtonElement,
    theme: "light" | "dark"
  ) => {
    const isDark = theme === "dark";
    buttonElement.setAttribute(
      "aria-label",
      isDark ? "Switch to light theme" : "Switch to dark theme"
    );
  };

  const handleThemeChange = (
    buttonElement: HTMLButtonElement,
    newTheme: "light" | "dark"
  ) => {
    htmlElement.setAttribute("data-theme", newTheme);
    localStorage.setItem(THEME_STORAGE_KEY, newTheme);
    updateButtonAriaLabel(buttonElement, newTheme);
  };

  function initializeThemeToggleButton(buttonElement: HTMLButtonElement) {
    const currentThemeOnLoadAttr = htmlElement.getAttribute("data-theme");
    if (
      currentThemeOnLoadAttr === "light" ||
      currentThemeOnLoadAttr === "dark"
    ) {
      updateButtonAriaLabel(buttonElement, currentThemeOnLoadAttr);
    } else {
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      updateButtonAriaLabel(buttonElement, prefersDark ? "dark" : "light");
    }

    const clickHandler = () => {
      const currentThemeAttr = htmlElement.getAttribute("data-theme");
      const currentTheme: "light" | "dark" =
        currentThemeAttr === "light" || currentThemeAttr === "dark"
          ? currentThemeAttr
          : window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
      const newTheme: "light" | "dark" =
        currentTheme === "dark" ? "light" : "dark";
      handleThemeChange(buttonElement, newTheme);
    };

    if ((buttonElement as any)._themeToggleClickListener) {
      buttonElement.removeEventListener(
        "click",
        (buttonElement as any)._themeToggleClickListener
      );
    }
    (buttonElement as any)._themeToggleClickListener = clickHandler;
    buttonElement.addEventListener("click", clickHandler);
  }

  document.addEventListener("astro:page-load", () => {
    const toggleButton = document.getElementById(
      "theme-toggle"
    ) as HTMLButtonElement | null;
    if (toggleButton) {
      initializeThemeToggleButton(toggleButton);
    }
  });

  document.addEventListener("themeapplied", (event: Event) => {
    const customEvent = event as CustomEvent<{ theme: "light" | "dark" }>;
    const toggleButton = document.getElementById(
      "theme-toggle"
    ) as HTMLButtonElement | null;
    if (
      toggleButton &&
      customEvent.detail &&
      (customEvent.detail.theme === "light" ||
        customEvent.detail.theme === "dark")
    ) {
      updateButtonAriaLabel(toggleButton, customEvent.detail.theme);
    }
  });
</script>
<style>
  .theme-toggle-button {
    --toggle-size: 1em;
    background: transparent;
    border: none;
    padding: 0;
    margin: 0;
    cursor: pointer;
    display: inline-block;
    vertical-align: middle;
    width: var(--toggle-size);
    height: var(--toggle-size);
    transition: transform 0.2s ease;
  }

  .toggle-icon {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    overflow: hidden;
    transform: rotate(0deg);
    transition: transform 0.5s ease;
  }

  .toggle-icon::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #000 0%, #000 50%, #fff 50%, #fff 100%);
    border-radius: 50%;
    border: 1px solid #000;
    box-sizing: border-box;
  }

  html[data-theme="dark"] .toggle-icon {
    transform: rotate(180deg);
  }

  html[data-theme="dark"] .toggle-icon::before {
    border-color: #fff;
  }

  .theme-toggle-button:focus-visible {
    outline-offset: 2px;
    outline: 2px solid #000;
  }

  html[data-theme="dark"] .theme-toggle-button:focus-visible {
    outline: 2px solid #fff;
  }
</style>
