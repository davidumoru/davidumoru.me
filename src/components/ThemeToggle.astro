---

---

<button
  id="theme-toggle"
  aria-label="Toggle theme"
  title="Toggle theme"
  class="group theme-toggle-btn"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="icon"
  >
    <circle cx="12" cy="12" r="9"></circle>
    <line x1="12" y1="3" x2="12" y2="21"></line>
    <line x1="12" y1="9" x2="16.65" y2="4.35"></line>
    <line x1="12" y1="14.3" x2="19.37" y2="6.93"></line>
    <line x1="12" y1="19.6" x2="20.85" y2="10.75"></line>
  </svg>
  <span class="sr-only">Toggle theme</span>
</button>

<style>
  .theme-toggle-btn {
    color: var(--gray-12);
    background: transparent !important;
    border: none;
    padding: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: transform 0.2s ease;
    outline: none;

    -webkit-tap-highlight-color: transparent !important;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0) !important;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;

    -webkit-focus-ring-color: transparent;
    focus-ring-color: transparent;
  }

  .theme-toggle-btn:hover {
    transform: scale(1.05);
  }

  .theme-toggle-btn:active {
    transform: scale(0.95);
    -webkit-tap-highlight-color: transparent !important;
  }

  .theme-toggle-btn:focus {
    outline: none;
    -webkit-tap-highlight-color: transparent !important;
  }

  .theme-toggle-btn:focus-visible {
    outline: none;
    -webkit-tap-highlight-color: transparent !important;
  }

  .icon {
    width: 1.125rem;
    height: 1.125rem;
    transition: transform 0.3s ease-in-out;
    transform: rotate(0deg);
    pointer-events: none;
  }

  html[data-theme="dark"] .icon {
    transform: rotate(180deg);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  * {
    -webkit-tap-highlight-color: transparent !important;
  }
</style>

<script>
  const THEME_STORAGE_KEY = "theme-preference";
  const htmlElement = document.documentElement;

  const handleThemeChange = (newTheme: "light" | "dark") => {
    htmlElement.setAttribute("data-theme", newTheme);
    localStorage.setItem(THEME_STORAGE_KEY, newTheme);
  };

  function initializeThemeToggleButton(buttonElement: HTMLButtonElement) {
    const currentThemeAttr = htmlElement.getAttribute("data-theme");
    const currentTheme: "light" | "dark" =
      currentThemeAttr === "light" || currentThemeAttr === "dark"
        ? currentThemeAttr
        : window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";

    const clickHandler = (e: Event) => {
      e.preventDefault();
      e.stopPropagation();
      const newTheme: "light" | "dark" =
        htmlElement.getAttribute("data-theme") === "dark" ? "light" : "dark";
      handleThemeChange(newTheme);
    };

    if ((buttonElement as any)._themeToggleClickListener) {
      buttonElement.removeEventListener(
        "click",
        (buttonElement as any)._themeToggleClickListener
      );
    }
    (buttonElement as any)._themeToggleClickListener = clickHandler;
    buttonElement.addEventListener("click", clickHandler);

    buttonElement.addEventListener("touchstart", (e: Event) => {
      e.preventDefault();
    });

    buttonElement.addEventListener("touchend", (e: Event) => {
      e.preventDefault();
      clickHandler(e);
    });
  }

  document.addEventListener("astro:page-load", () => {
    const toggleButton = document.getElementById(
      "theme-toggle"
    ) as HTMLButtonElement | null;
    if (toggleButton) {
      initializeThemeToggleButton(toggleButton);
    }
  });

  document.addEventListener("themeapplied", (event: Event) => {
    const customEvent = event as CustomEvent<{ theme: "light" | "dark" }>;
    const theme = customEvent.detail?.theme;
    if (theme === "light" || theme === "dark") {
      htmlElement.setAttribute("data-theme", theme);
      localStorage.setItem(THEME_STORAGE_KEY, theme);
    }
  });
</script>
