---
import { Image } from "astro:assets";

interface Props {
  location: string;
  country: string;
  imageUrl: ImageMetadata | string;
  imageAlt?: string;
  hue?: number;
  date?: string;
}

const {
  location,
  country,
  imageUrl,
  imageAlt = `Postage stamp depicting ${location}, ${country}`,
  hue = Math.random() * 360,
  date,
} = Astro.props;

const primaryColor = `hsl(${hue}, 65%, 55%)`;
const lightBgColor = `hsl(${hue}, 80%, 96%)`;
const darkTextColor = `hsl(${hue}, 40%, 30%)`;
const postmarkColor = `hsla(${hue}, 20%, 40%, 0.7)`;

const isImageAsset = typeof imageUrl === "object" && "src" in imageUrl;
---

<div
  class="travel-stamp"
  style={`--hue: ${hue}; --primary-color: ${primaryColor}; --light-bg: ${lightBgColor}; --dark-text: ${darkTextColor}; --postmark-color: ${postmarkColor};`}
>
  <div class="stamp-content">
    {
      isImageAsset ? (
        <Image
          src={imageUrl}
          alt={imageAlt}
          class="stamp-image"
          widths={[200, 400]}
          sizes="(max-width: 600px) 200px, 400px"
          loading="lazy"
          format="webp"
        />
      ) : (
        <img src={imageUrl} alt={imageAlt} class="stamp-image" loading="lazy" />
      )
    }
    <div class="text-overlay">
      <span class="location">{location}</span>
      <span class="country">{country}</span>
    </div>
    {
      date && (
        <div class="postmark">
          <span class="postmark-location">{location.substring(0, 10)}</span>
          <span class="postmark-date">{date}</span>
        </div>
      )
    }
  </div>
</div>

<style>
  .travel-stamp {
    --stamp-width: 180px;
    --perforation-size: 8px;

    position: relative;
    width: var(--stamp-width);
    aspect-ratio: 4 / 5;
    background-color: var(--light-bg);
    padding: var(--perforation-size);
    box-sizing: border-box;
    overflow: hidden;
    margin: 1rem;
    display: inline-block;
    box-shadow: 2px 3px 8px rgba(0, 0, 0, 0.15);
    transform: rotate(var(--rotate, -2deg));
    transition: transform 0.2s ease-out;

    border-style: solid;
    border-width: var(--perforation-size);
    border-image-source: radial-gradient(
      circle,
      transparent 35%,
      var(--light-bg) 36%
    );
    border-image-slice: 12;
    border-image-width: var(--perforation-size);
    border-image-repeat: round;
    border-color: transparent;
  }

  .travel-stamp:hover,
  .travel-stamp:focus-within {
    --rotate: 1deg;
    box-shadow: 4px 6px 12px rgba(0, 0, 0, 0.2);
  }

  .stamp-content {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
  }

  .stamp-image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: sepia(0.1) contrast(1.05);
  }

  .text-overlay {
    position: absolute;
    bottom: 5px;
    left: 5px;
    right: 5px;
    text-align: center;
    font-family: serif;
    font-size: 0.7rem;
    font-weight: bold;
    line-height: 1.1;
    color: var(--dark-text);
    text-shadow:
      0 0 3px white,
      0 0 5px white;
  }

  .location {
    display: block;
    font-size: 0.8rem;
    text-transform: uppercase;
  }

  .country {
    display: block;
    font-size: 0.65rem;
    opacity: 0.9;
  }

  .postmark {
    position: absolute;
    top: 10%;
    left: 10%;
    width: 60%;
    aspect-ratio: 1/1;
    border: 2px double var(--postmark-color);
    border-radius: 50%;
    color: var(--postmark-color);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transform: rotate(-15deg);
    font-family: monospace, sans-serif;
    font-weight: bold;
    text-align: center;
    opacity: 0.8;
    pointer-events: none;
  }

  .postmark-location {
    font-size: 0.6rem;
    text-transform: uppercase;
    line-height: 1;
    letter-spacing: 0.5px;
  }

  .postmark-date {
    font-size: 0.55rem;
    line-height: 1;
  }
</style>
